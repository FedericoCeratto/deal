{
  "Context.__delattr__": {
    "raises": [
      "AttributeError"
    ]
  },
  "Context.__setattr__": {
    "raises": [
      "AttributeError",
      "TypeError"
    ]
  },
  "Context._set_integer_check": {
    "raises": [
      "TypeError",
      "ValueError"
    ]
  },
  "Context._set_signal_dict": {
    "raises": [
      "KeyError",
      "TypeError"
    ]
  },
  "Context.abs": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.add": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.canonical": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.compare": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.compare_signal": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.compare_total": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.compare_total_mag": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.copy_abs": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.copy_decimal": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.copy_negate": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.copy_sign": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.divide": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.divide_int": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.divmod": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.exp": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.fma": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.is_canonical": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.is_finite": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.is_infinite": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.is_nan": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.is_normal": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.is_qnan": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.is_signed": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.is_snan": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.is_subnormal": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.is_zero": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.ln": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.log10": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.logb": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.logical_and": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.logical_invert": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.logical_or": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.logical_xor": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.max": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.max_mag": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.min": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.min_mag": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.minus": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.multiply": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.next_minus": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.next_plus": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.next_toward": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.normalize": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.number_class": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.plus": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.power": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.quantize": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.remainder": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.remainder_near": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.rotate": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.same_quantum": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.scaleb": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.shift": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.sqrt": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.subtract": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.to_eng_string": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.to_integral_exact": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.to_integral_value": {
    "raises": [
      "TypeError"
    ]
  },
  "Context.to_sci_string": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.__add__": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.__ceil__": {
    "raises": [
      "OverflowError",
      "ValueError"
    ]
  },
  "Decimal.__divmod__": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.__float__": {
    "raises": [
      "ValueError"
    ]
  },
  "Decimal.__floor__": {
    "raises": [
      "OverflowError",
      "ValueError"
    ]
  },
  "Decimal.__floordiv__": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.__format__": {
    "raises": [
      "ValueError"
    ]
  },
  "Decimal.__hash__": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.__int__": {
    "raises": [
      "OverflowError",
      "ValueError"
    ]
  },
  "Decimal.__mod__": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.__mul__": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.__new__": {
    "raises": [
      "TypeError",
      "ValueError"
    ]
  },
  "Decimal.__pow__": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.__rdivmod__": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.__rfloordiv__": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.__rmod__": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.__round__": {
    "raises": [
      "OverflowError",
      "TypeError",
      "ValueError"
    ]
  },
  "Decimal.__rpow__": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.__rsub__": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.__rtruediv__": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.__sub__": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.__truediv__": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal._power_modulo": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal._round": {
    "raises": [
      "ValueError"
    ]
  },
  "Decimal.as_integer_ratio": {
    "raises": [
      "OverflowError",
      "ValueError"
    ]
  },
  "Decimal.compare": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.compare_signal": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.compare_total": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.compare_total_mag": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.copy_sign": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.fma": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.from_float": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.logical_and": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.logical_or": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.logical_xor": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.max": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.max_mag": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.min": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.min_mag": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.next_toward": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.quantize": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.remainder_near": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.rotate": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.same_quantum": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.scaleb": {
    "raises": [
      "TypeError"
    ]
  },
  "Decimal.shift": {
    "raises": [
      "TypeError"
    ]
  },
  "_Log10Memoize.getdigits": {
    "raises": [
      "ValueError"
    ]
  },
  "_convert_other": {
    "raises": [
      "TypeError"
    ]
  },
  "_format_align": {
    "raises": [
      "ValueError"
    ]
  },
  "_format_number": {
    "raises": [
      "ValueError"
    ]
  },
  "_group_lengths": {
    "has": [
      "import"
    ],
    "raises": [
      "ValueError"
    ]
  },
  "_insert_thousands_sep": {
    "raises": [
      "ValueError"
    ]
  },
  "_log10_lb": {
    "raises": [
      "ValueError"
    ]
  },
  "_parse_format_specifier": {
    "raises": [
      "ValueError"
    ]
  },
  "_sqrt_nearest": {
    "raises": [
      "ValueError"
    ]
  }
}